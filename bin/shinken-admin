#!/usr/bin/env python
#Copyright (C) 2009-2011 :
#    Gabes Jean, naparuba@gmail.com
#    Gerhard Lausser, Gerhard.Lausser@consol.de
#    Gregory Starck, g.starck@gmail.com
#    Hartmut Goebel, h.goebel@goebel-consult.de
#
#This file is part of Shinken.
#
#Shinken is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Shinken is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Shinken.  If not, see <http://www.gnu.org/licenses/>.

import os
import cmd 
import sys 
import time

try:
    from shinken.bin import VERSION
    import shinken
except ImportError:
    # If importing shinken fails, try to load from current directory
    # or parent directory to support running without installation.
    # Submodules will then be loaded from there, too.
    import imp
    imp.load_module('shinken', *imp.find_module('shinken', [os.path.realpath("."), os.path.realpath(".."), os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), "..")]))


from shinken.bin import VERSION
try:
    import shinken.pyro_wrapper as pyro
except ImportError:
    sys.exit("Shinken require the Python Pyro module. Please install it.")
from shinken.arbiterlink import ArbiterLink
Pyro = pyro.Pyro

class Dummy:
    def add(self, o):
        pass

from shinken.log import logger
logger.load_obj(Dummy())


sat_types = ['arbiter', 'scheduler', 'poller', 'reactionner',
             'receiver', 'broker']


def get_since(t):
    now = time.time()
    if t == 0:
        return "never"
    return "%ds ago" % (int(now - t))
    

class ShinkenAdmin(cmd.Cmd):
    prompt = "> " 
    
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.arb = None
    
    # If we got no connexions, connect with a standard localhost one
    def look_connexion(self):
        if not self.arb:
            self.do_connect('')

    def emptyline(self):
        return
            

    def do_connect(self, line):
        '''
        Connect to an arbiter daemon
        Syntax : connect [host]:[port]
        Ex : for Connecting to server, port 7770
        > connect server:7770
        Ex : connect to localhost, port 7770
        > connect
        '''
        line = line.strip()
      	tokens = line.split(':')
        if line == '':
            addr = 'localhost'
            port = '7770'
        else:
            addr = tokens[0]
            try:
                port = tokens[1]
            except IndexError:
                port = '7770'
        #port = int(port)
        print "Connection to %s:%s" % (addr, port)
        ArbiterLink.use_ssl = False
        self.arb = ArbiterLink({'arbiter_name': 'unnamed arbiter', 'address' : addr, 'port' : port})
        self.arb.fill_default()
        self.arb.pythonize()
        self.arb.update_infos()
        if self.arb.reachable:
            print "Connection OK"
        else:
            print "Connection problem"


    def do_status(self, line):
        '''
        Get daemons status as the connected arbiter know. If you call it
        without an already open arbiter connection with 'connect' it will automatically
        connect to locahost:7770.
        '''
        self.look_connexion()
        data = self.arb.get_all_states()
        
        arbs = data['arbiter']
        print "Arbiter \t\t address \t port \t alive \t reachable \t last_check"
        for a in arbs:
            print " %.15s \t %.15s \t %.5s \t %.5s \t %.5s \t\t %s" % (a.arbiter_name, a.address, a.port,
                                                                     a.alive, a.reachable, get_since(a.last_check))
        print "\nScheduler \t\t address \t port \t alive \t reachable \t last_check"
        for s in data['scheduler']:
            print " %.15s \t\t %.15s \t %.5s \t %.5s \t %.5s \t\t %s" % (s.scheduler_name, s.address, s.port,
                                                s.alive, s.reachable, get_since(s.last_check))
            
        print "\nPoller \t\t address \t port \t alive \t reachable \t last_check"
        for s in data['poller']:
            print " %.15s \t\t %.15s \t %.5s \t %.5s \t %.5s \t\t %s" % (s.poller_name, s.address, s.port,
                                                s.alive, s.reachable, get_since(s.last_check))
            
        print "\nReactionner \t\t address \t port \t alive \t reachable \t last_check"
        for s in data['reactionner']:
            print " %.15s \t\t %.15s \t %.5s \t %.5s \t %.5s \t\t %s" % (s.reactionner_name, s.address, s.port,
                                                s.alive, s.reachable, get_since(s.last_check))

        print "\nBroker \t\t address \t port \t alive \t reachable \t last_check"
        for s in data['broker']:
            print " %.15s \t\t %.15s \t %.5s \t %.5s \t %.5s \t\t %s" % (s.broker_name, s.address, s.port,
                                                s.alive, s.reachable, get_since(s.last_check))

        print "\nReceiver \t\t address \t port \t alive \t reachable \t last_check"
        for s in data['receiver']:
            print " %.15s \t\t %.15s \t %.5s \t %.5s \t %.5s \t\t %s" % (s.receiver_name, s.address, s.port,
                                                s.alive, s.reachable, get_since(s.last_check))

        

    def do_gethostname(self, line):
        '''
        Return the hostname of this machine as is it look for the*
        host_name parameter of the arbiter configuration.
        '''
        import socket
        print socket.gethostname()


    def do_EOF(self, line):
        return self.do_quit('')


    def do_quit(self,line): 
        print "", 
        return True 

    
    def do_easter(self, line):
        '''
        Surprise. Look closer to the code to know what to launch with it.
        '''
        import shinken.easter as easter
        line = line.strip()
        f = getattr(easter, line, None)
        if f:
            f()
    



intro = 'Available functions :\n# connect [localhost:7770] \n# status\n# gethostname\n# help [function]\n# quit'

if __name__ == "__main__": 
    ShinkenAdmin().cmdloop(intro)
